//- Common mixins that templates can share

mixin Nav(multipage, collapsible)
    div.col-md-3
        nav#nav.hidden-sm.hidden-xs.affix.nav
            if multipage
                .list-group
                    a.list-group-item.heading(href="#") Home
            each resourceGroup in api.resourceGroups
                .list-group
                    a.list-group-item.heading.collapsed(data-toggle="#{(collapsible ? 'collapse' : '')}", data-target="##{(multipage ? 'page:' : '') + slug(resourceGroup.name)}-menu", href="##{(multipage ? 'page:' : '') + slug(resourceGroup.name)}")
                        if collapsible && resourceGroup.resources.length
                            span.toggle.pull-right
                                span.open.fa.fa-angle-down
                                span.closed.fa.fa-angle-right
                        = resourceGroup.name || 'Resource Group'
                    div(class=collapsible ? 'collapse' : '', id="#{(multipage ? 'page:' : '') + slug(resourceGroup.name)}-menu")
                        each resource in resourceGroup.resources
                            if !condenseNav || (resource.actions.length != 1)
                                a.list-group-item(href="##{multipage ? 'page:' + slug(resourceGroup.name) + ',header:' : ''}#{slug(resourceGroup.name)}-#{slug(resource.name)}", style="border-top-left-radius: 0; border-top-right-radius: 0")
                                    = resource.name || 'Resource'
                                each action in resource.actions
                                    a.list-group-item.indent-text(href="##{multipage ? 'page:' + slug(resourceGroup.name) + ',header:' : ''}#{slug(resourceGroup.name)}-#{slug(resource.name)}-#{slug(action.method)}", style="border-top-left-radius: 0; border-top-right-radius: 0")
                                        +Icon(action.method)
                                        div.action-name
                                            = action.name || action.method + ' ' + (action.attributes.uriTemplate || resource.uriTemplate)
                            else
                                a.list-group-item(href="##{multipage ? 'page:' + slug(resourceGroup.name) + ',header:' : ''}#{slug(resourceGroup.name)}-#{slug(resource.name)}", style="border-top-left-radius: 0; border-top-right-radius: 0")
                                    - var action = resource.actions[0]
                                    +Icon(action.method)
                                    div.action-name.full
                                      = resource.name || action.name || action.method + ' ' + (action.attributes.uriTemplate || resource.uriTemplate)
            each meta in api.metadata
                if meta.name == 'HOST'
                    p(style="text-align: center; word-wrap: break-word;")
                        a(href=meta.value)= meta.value

mixin Parameters(params)
    ul.list-group
        li.list-group-item.bg-default: strong Parameters
        li.list-group-item
            dl.dl-horizontal
                each param in params
                    dt= param.name
                    dd
                        code= param.type
                        | &nbsp;
                        if param.required
                            span.required (required)
                        else
                            span (optional)
                        | &nbsp;
                        if param.default
                            span.text-info.default
                                strong Default:&nbsp;
                                span= param.default
                            | &nbsp;
                        if param.example
                            span.text-muted.example
                                strong Example:&nbsp;
                                span= param.example
                        != markdown(param.description)
                        if param.values.length
                            p
                                strong Choices:&nbsp;
                                each value in param.values
                                    code= value.value
                                    = ' '

mixin RequestResponse(title, request, resourceGroup, resource, action)
    - var id = hash(resourceGroup.name.toString() + resource.name.toString() + action.name.toString() + action.method.toString() + title.toString() + request.name.toString() + request.headers.toString() + request.body.toString() + request.schema.toString())
    - var content = request.description || Object.keys(request.headers).length || request.body || request.schema
    li.list-group-item
        strong
            = title
            if request.name
                | &nbsp;&nbsp;
                code= request.name
        if content
            a.pull-right.collapsed(data-toggle="collapse", data-target="##{id}")
                span.closed Show
                span.open Hide
    if content
        li.list-group-item.panel-collapse.collapse(id=id)
            if request.description
                .description!= markdown(request.description)

            if title == 'Request'
              div(class="pull-right")
                | Show code sample:  
                select(class="select-code-sample")
                  option(value="raw") None
                  option(value="shell") cUrl
                  option(value="java") Java
                  option(value="javascript") Javascript
                  option(value="perl") Perl
                  option(value="php") PHP
                  option(value="ruby") Ruby
                  option(value="csharp") C#
              div(class="clearfix")
              hr
            div(class="request-container", data-lang="raw")
              if Object.keys(request.headers).length
                  h5 Headers
                  pre
                      code
                          each item in request.headers
                              != highlight(item.name + ': ' + item.value, 'http')
                              br
              if request.body
                  h5 Body
                  pre
                      code!= highlight(request.body)
              if request.schema
                  h5 Schema
                  pre
                      code!= highlight(request.schema)
            if title == 'Request'
              +Snippets(request, resource, action)

mixin Snippets(request, resource, action)
    div(class="request-container", data-lang="shell")
      +curlSnippet(request, resource, action)
    div(class="request-container", data-lang="java")
      +javaSnippet(request, resource, action)
    div(class="request-container", data-lang="javascript")
      +javascriptSnippet(request, resource, action)
    div(class="request-container", data-lang="perl")
      +perlSnippet(request, resource, action)
    div(class="request-container", data-lang="php")
      +phpSnippet(request, resource, action)
    div(class="request-container", data-lang="ruby")
      +rubySnippet(request, resource, action)
    div(class="request-container", data-lang="csharp")
      +csharpSnippet(request, resource, action)

mixin curlSnippet(request, resource, action)
  - var code = "curl --include \\\\ \n"
  - code += "--request " + action.method + " \\\\ \n"
  each header in request.headers
    - code += "--header \\\"" + header.name + ": " + header.value.replace(/"/g, "\\\"") + "\\\" \\\\ \n"
  if request.body
    - code += "--data-binary \\\"" + request.body.replace(/"/g, "\\\"").replace(/(\r\n|\n|\r)/gm,"") + "\\\" \\\\ \n"
  - code += "http#{request.ssl? ? 's' : ''}://#{request.host_with_port}" + resource.uriTemplate

  div <%= raw(raw(CodeRay.scan("!{code}", :ruby).div)) %>

mixin javaSnippet(request, resource, action)
  - var code = "import javax.ws.rs.client.Client;\nimport javax.ws.rs.client.ClientBuilder;\nimport javax.ws.rs.client.Entity;\nimport javax.ws.rs.core.Response;\nimport javax.ws.rs.core.MediaType;\n"
  - code += "Client client = ClientBuilder.newClient();\n"
  if request.body
    - code += "Entity<String> payload = Entity.text(" + request.body.replace(/"/g, "\\\"").replace(/(\r\n|\n|\r)/gm,"") + ");\n"

  - code += "Response response = client.target(\\\"http#{request.ssl? ? 's' : ''}://#{request.host_with_port}\\\")\n"
  - code += ".path(\\\"" + resource.uriTemplate + "\\\")\n"
  - code += ".request(MediaType.TEXT_PLAIN_TYPE)\n"
  each header in request.headers
    - code += ".header(" + header.name + ", \\\"" + header.value.replace(/"/g, "\\\\\\\"") + "\\\")\n"
  - code += "." + action.method.toLowerCase() + "();\n\n"
  - code +=  "System.out.println(\\\"status: \\\" + response.getStatus());\n"
  - code +=  "System.out.println(\\\"headers: \\\" + response.getHeaders());\n"
  - code +=  "System.out.println(\\\"body:\\\" + response.readEntity(String.class));\n"

  div <%= raw(CodeRay.scan("!{code}", :java).div) %>

mixin javascriptSnippet(request, resource, action)
  - var code = "var xhr = new XMLHttpRequest();\n"
  - code += "xhr.open(\\\"" + action.method + ", http#{request.ssl? ? 's' : '' }://#{request.host_with_port}" + resource.uriTemplate + "\\\")\n"
  each header in request.headers
    - code += ".xhr.setRequestHeader(\\\"" + header.name + ", " + header.value.replace(/"/g, "\\\"") + "\\\");\n"
  - code += "\n"
  - code += "xhr.onreadystatechange = function () {\n"
  - code += "  if (this.readyState == 4) {\n"
  - code += "    alert('Status: '+this.status+'\nHeaders: '+JSON.stringify(this.getAllResponseHeaders())+'\nBody: '+this.responseText);\n"
  - code += "  }\n"
  - code += "};\n"
  if request.body
    -code += "xhr.send(" + request.body.replace(/"/g, "\\\"").replace(/(\r\n|\n|\r)/gm,"") + ");\n"
  else
    - code += "xhr.send(null);\n"

  div <%= raw(CodeRay.scan("!{code}", :javascript).div) %>

mixin perlSnippet(request, resource, action)
  - var code = "require LWP::UserAgent;\n"

  - code +="my $ua = LWP::UserAgent->new;\n"
  each header in request.headers
    - code +="$ua->default_header(\\\"" + header.name.toLowerCase() + "\\\" => \\\"" + header.value.replace(/"/g, "\\\"") +"\\\");\n"

  if request.body
    - code += "$data = " + request.body.replace(/"/g, "\\\"").replace(/(\r\n|\n|\r)/gm,"") + ";\n"
    - code += "my $response = $ua->" + action.method.toLowerCase() + "(\\\"http#{request.ssl? ? 's' : ''}://#{request.host_with_port}" + resource.uriTemplate + "\\\", Content => $data);\n"
  else
    - code += "my $response = $ua->" + action.method.toLowerCase() + "(\\\"http#{request.ssl? ? 's' : '' }://#{request.host_with_port}" + resource.uriTemplate + "\\\");\n"

  - code += "print $response->as_string;\n"

  div <%= raw(CodeRay.scan("!{code}", :ruby).div) %>

mixin phpSnippet(request, resource, action)
  - var code = "<?php\n"
  - code += "$ch = curl_init();\n"
  - code += "curl_setopt($ch, CURLOPT_URL, \\\"http#{request.ssl? ? 's' : '' }://#{request.host_with_port}" + resource.uriTemplate + "\\\");\n"
  - code += "curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);\n"
  - code += "curl_setopt($ch, CURLOPT_HEADER, FALSE);\n"
  if action.method == 'POST'
    - code += "curl_setopt($ch, CURLOPT_" + action.method + ", TRUE);\n"
  if action.method == 'PUT'
    - code += "curl_setopt($ch, CURLOPT_CUSTOMREQUEST, \\\"PUT\\\");\n"
  if action.method == 'DELETE'
    - code += "curl_setopt($ch, CURLOPT_CUSTOMREQUEST, \\\"DELETE\\\");\n"
  if request.body
    - code += "curl_setopt($ch, CURLOPT_POSTFIELDS, " + request.body.replace(/"/g, "\\\"").replace(/(\r\n|\n|\r)/gm,"") + ");\n"
  - code += "curl_setopt($ch, CURLOPT_HTTPHEADER, array(" + request.headers.map(function (header) { return "\\\"" + header.name + ": " + header.value.replace(/"/g, "\\\"") + "\\\""; }).join(", ") + "\\));\n"
  - code += "$response = curl_exec($ch);\n"
  - code += "curl_close($ch);\n"
  - code += "var_dump($response);\n"

  div <%= raw(CodeRay.scan("!{code}", :php).div) %>

mixin rubySnippet(request, resource, action)
  - var code = "require 'rubygems' if RUBY_VERSION < '1.9'\n"
  - code += "require 'rest_client'\n"
  - code += "headers = { " + request.headers.map(function (header) { return ":" + header.name.toLowerCase() + " => \\\"" + header.value.replace(/"/g, "\\\"") + "\\\""; }).join(", ") + " }\n"
  if request.body
    - code += "data = " + request.body.replace(/"/g, "\\\"").replace(/(\r\n|\n|\r)/gm,"") + "\n"
    - code += "response = RestClient." + action.method.toLowerCase() + "('http#{request.ssl? ? 's' : ''}://#{request.host_with_port}" + resource.uriTemplate + "', data, headers\n"
  else
    - code += "response = RestClient." + action.method.toLowerCase() + "('http#{request.ssl? ? 's' : ''}://#{request.host_with_port}" +resource.uriTemplate + "', headers\n"
  - code += "puts response\n"

  div <%= raw(CodeRay.scan("!{code}", :ruby).div) %>

mixin csharpSnippet(request, resource, action)
  - var code = "using System;\n"
  - code += "using System.Net.Http;\n"
  - code += "var baseAddress = new Uri(\\\"http#{request.ssl? ? 's' : '' }://#{request.host_with_port}\\\");\n"
  - code += "using (var httpClient = new HttpClient{ BaseAddress = baseAddress })\n"
  - code += "{\n"
  each header in request.headers
    - code += "httpClient.DefaultRequestHeaders.TryAddWithoutValidation(\\\"" + header.name.toLowerCase() + "\\\", \\\"" + header.value.replace(/"/g, "\\\"") + "\\\");\n"
  if request.body
    - code += "using(var content = new StringContent(" + request.body.replace(/"/g, "\\\"").replace(/(\r\n|\n|\r)/gm,"") + ")) {\n"
    - code += "  using(var response = await httpClient." + action.method[0].toUpperCase() + action.method.slice(1).toLowerCase() + "Async(" + resource.uriTemplate + "))\n"
    - code += "   {\n"
    - code += "     string responseData = await response.Content.ReadAsStringAsync();\n"
    - code += "   }\n"
    - code += " }\n"
  if request.body
    - code += "}\n"

  div <%= raw(CodeRay.scan("!{code}", :c).div) %>


mixin Examples(resourceGroup, resource, action)
    ul.list-group
        each example in action.examples
            each request in example.requests
                +RequestResponse('Request', request, resourceGroup, resource, action)
            each response in example.responses
                +RequestResponse('Response', response, resourceGroup, resource, action)
                
mixin DataStructure(dataStructure)
    section.panel.panel-info
        .panel-heading
            h5.panel-title
                if dataStructure.name.literal
                    = dataStructure.name.literal
                | &nbsp;Attributes
        .panel-body
            dl.dl-horizontal
                each section in dataStructure.sections
                    each member in section.content
                        if member.class == 'property'
                            dt= member.content.name ? member.content.name.literal : ''
                            dd
                                if member.content.valueDefinition.typeDefinition.typeSpecification.name
                                    code= member.content.valueDefinition.typeDefinition.typeSpecification.name
                                    | &nbsp;
                                if member.content.valueDefinition.values.length
                                    span.text-muted.example
                                        strong Example:&nbsp;
                                        = member.content.valueDefinition.values[0].literal
                                if member.content.description
                                    != markdown(member.content.description)
                                else
                                    p

mixin ResourceGroup(resourceGroup, getButtonClass, multipage)
    .panel.panel-default
        .panel-heading
            h3(id="#{slug(resourceGroup.name)}")
                = resourceGroup.name || 'Resource Group'
                | &nbsp;
                a(href="##{multipage ? 'page:' : ''}#{slug(resourceGroup.name)}")
                    i.fa.fa-link
        .panel-body
            if resourceGroup.description
                != markdown(resourceGroup.description)
            each resource in resourceGroup.resources
                h4(id="#{slug(resourceGroup.name)}-#{slug(resource.name)}")
                    = resource.name || 'Resources'
                    | &nbsp;
                    a(href="##{(multipage ? 'page:' + slug(resourceGroup.name) + ',header:' : '')}#{slug(resourceGroup.name)}-#{slug(resource.name)}")
                        i.fa.fa-link
                if resource.description
                    != markdown(resource.description)
                each data in resource.content
                    if data.element == 'dataStructure'
                        +DataStructure(data)
                each action in resource.actions
                    case action.method
                        when 'POST': - var panelClass = 'panel-success'
                        when 'GET': - var panelClass = 'panel-info'
                        when 'PUT': - var panelClass = 'panel-warning'
                        when 'PATCH': - var panelClass = 'panel-warning'
                        when 'DELETE': - var panelClass = 'panel-danger'
                        default: - var panelClass = 'panel-default'
                    section.panel(class=panelClass, id="#{slug(resourceGroup.name)}-#{slug(resource.name)}-#{slug(action.method)}")
                        .panel-heading
                            if action.name
                                div(style="float:right")
                                    span(style="text-transform: lowercase")= action.name
                            case action.method
                                when 'POST': - var btnClass = 'btn-success'
                                when 'GET': - var btnClass = 'btn-' + getButtonClass
                                when 'PUT': - var btnClass = 'btn-warning'
                                when 'PATCH': - var btnClass = 'btn-warning'
                                when 'DELETE': - var btnClass = 'btn-danger'
                                default: - var btnClass = 'btn-default'
                            div(style="float:left")
                                a.btn.btn-xs(class=btnClass, href="##{(multipage ? 'page:' + slug(resourceGroup.name) + ',header:' : '')}#{slug(resourceGroup.name)}-#{slug(resource.name)}-#{slug(action.method)}")= action.method
                            div(style="overflow:hidden")
                                code= action.attributes.uriTemplate || resource.uriTemplate
                        if action.description
                            .panel-body!= markdown(action.description)

                        - var params = action.parameters.length ? action.parameters : resource.parameters
                        if params.length
                            +Parameters(params)
                        if action.examples
                            +Examples(resourceGroup, resource, action)

mixin Paginate(resourceGroups, index)
    if index < resourceGroups.length - 1
        a.btn.btn-default.pull-right(href="#page:#{slug(resourceGroups[index + 1].name)}")
            | Next&nbsp;
            i.fa.fa-arrow-circle-right

    if index > 0
        a.btn.btn-default(href="#page:#{slug(resourceGroups[index - 1].name)}")
            i.fa.fa-arrow-circle-left
            |  Previous
    else
        a.btn.btn-default(href="#")
            i.fa.fa-arrow-circle-left
            |  Previous
    .clearfix
    hr

mixin Icon(method)
    case method
        when 'GET'
            span.badge.alert-info
                i.fa.fa-arrow-down
        when 'POST'
            span.badge.alert-success
                i.fa.fa-plus
        when 'PUT'
            span.badge.alert-warning
                i.fa.fa-pencil
        when 'PATCH'
            span.badge.alert-warning
                i.fa.fa-pencil
        when 'DELETE'
            span.badge.alert-danger
                i.fa.fa-times
        default
            span.badge
                i.fa.fa-dot-circle-o

mixin Content(getButtonClass, multipage)
    div(data-bind=multipage ? "visible: page() == 'home'" : undefined)
        header
            .page-header
                h1#top= api.name || 'API Documentation'

        .description!= markdown(api.description)

        if multipage
            a.btn.btn-default.pull-right(href="#page:#{slug(api.resourceGroups[0].name)}")
                | Next&nbsp;
                i.fa.fa-arrow-circle-right
            .clearfix
            hr

    each resourceGroup, index in api.resourceGroups
        div(data-bind=multipage ? "visible: page() == '#{slug(resourceGroup.name)}', style: {marginTop: page() == '#{slug(resourceGroup.name)}' ? '38px' : ''}" : undefined)
            +ResourceGroup(resourceGroup, getButtonClass, multipage)

            if multipage
                +Paginate(api.resourceGroups, index)

mixin Multipage()
    //- Multi-page support through Knockout.js
    script(src="//cdnjs.cloudflare.com/ajax/libs/knockout/3.0.0/knockout-min.js")
    script
        :coffee
            class App
                constructor: ->
                    @page = ko.observable 'home'

            window.app = new App()

            window.onhashchange = ->
                vars = {}
                for v in location.hash.substr(1).split(',')
                    parts = v.split ':'
                    vars[parts[0]] = parts[1]

                # Set the page
                window.app.page vars.page or 'home'

                # Scroll to a header if Set
                if vars.header
                    $("##{vars.header}")[0].scrollIntoView true
                else
                    window.scrollTo 0, 0

            ko.applyBindings window.app

            # Load the correct page
            window.onhashchange()
